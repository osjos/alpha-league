Emulator toggle (Auth + Firestore)

Goal: flip one secret to switch your web app between Prod and Local Emulators.
When ON, we’ll start the emulators inside your Replit and the React app will connect to 127.0.0.1.

A1) Create emulator config at project root

In the Replit file explorer (root, not /web), create firebase.json:

{
  "emulators": {
    "firestore": { "port": 8080, "host": "127.0.0.1" },
    "auth": { "port": 9099, "host": "127.0.0.1" }
  },
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  }
}


Create firestore.rules (dev-friendly rules for emulator use):

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public read; no client writes in PROD, but in emulator we allow simple seeding + moderation
    match /traders/{doc} {
      allow read: if true;
      // Allow writes in emulator only (no auth check to keep PoC simple)
      allow write: if true;
    }

    match /ideas/{doc} {
      // Read approved for all; owner can read their own pending
      allow read: if resource.data.status == 'approved'
        || (request.auth != null && resource.data.submittedByUid == request.auth.uid);

      // Anyone signed-in can create pending ideas
      allow create: if request.auth != null
        && request.resource.data.status == 'pending';

      // Simple "moderation" in emulator: any signed-in user can approve -> sets moderatedByUid
      allow update: if request.auth != null
        && request.resource.data.status in ['pending', 'approved']
        && request.resource.data.moderatedByUid == request.auth.uid;

      // Allow deletes in emulator (to clean test data)
      allow delete: if request.auth != null;
    }

    // Heartbeat
    match /healthchecks/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
  }
}


Create firestore.indexes.json (we’ll fill real indexes in step 6.3C; for now keep it valid/empty):

{
  "indexes": [],
  "fieldOverrides": []
}